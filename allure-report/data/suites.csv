"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"","222","testGetPets()","","Fri Oct 17 12:30:23 IST 2025","passed","Fri Oct 17 12:30:23 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","testGetPets"
"","7","Should return employee by Id","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","testGetEmployeeById"
"","15","Should return empty when fetching non-existing employees by Id [Parameterized] [2] id=2222222","","Fri Oct 17 12:30:00 IST 2025","passed","Fri Oct 17 12:30:00 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testGetNonExistingEmployeeByIdParameterized"
"","54","Should delete employee by name [Parameterized] [1] name=Alice","","Fri Oct 17 12:30:00 IST 2025","passed","Fri Oct 17 12:30:00 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testDeleteEmployeeParameterized"
"","10","Should throw exception when updating non-existing employee [Parameterized] [1] id=1111111, newSalary=10000","","Fri Oct 17 12:30:00 IST 2025","passed","Fri Oct 17 12:30:00 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testUpdateNonExistingEmployeeByIdParameterized"
"","4","Should return 404 for not creating Pet","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.PetServiceTest","com.demo.springboot_restassured_framework.service.PetServiceTest","testCreatePet_NotFound"
"","14","Should throw exception when updating non-existing employee [Parameterized] [3] id=3333333, newSalary=30000","","Fri Oct 17 12:30:00 IST 2025","passed","Fri Oct 17 12:30:00 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testUpdateNonExistingEmployeeByIdParameterized"
"Verify that a Update Non Existing Employee By Id.","23","testUpdateNonExistingEmployeeById()","","Fri Oct 17 12:30:14 IST 2025","passed","Fri Oct 17 12:30:14 IST 2025","","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","testUpdateNonExistingEmployeeById"
"","255","testGetPetById()","","Fri Oct 17 12:30:23 IST 2025","passed","Fri Oct 17 12:30:23 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","testGetPetById"
"","127","testDeletePetById()","","Fri Oct 17 12:30:30 IST 2025","passed","Fri Oct 17 12:30:30 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","testDeletePetById"
"Verify that Create Employee With Null Name.","13","testCreateEmployeeWithNullName()","","Fri Oct 17 12:30:14 IST 2025","passed","Fri Oct 17 12:30:14 IST 2025","","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","testCreateEmployeeWithNullName"
"","153","testGetNonExistingPet()","","Fri Oct 17 12:30:24 IST 2025","passed","Fri Oct 17 12:30:24 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","testGetNonExistingPet"
"","18","Should return empty when fetching non-existing employees by Id [Parameterized] [1] id=1111111","","Fri Oct 17 12:30:00 IST 2025","passed","Fri Oct 17 12:30:00 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testGetNonExistingEmployeeByIdParameterized"
"","15","Should create employees successfully [Parameterized] [3] name=Sneha, designation=QA, salary=60000","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testCreateEmployeeParameterized"
"","30","Should delete employee by name [Parameterized] [3] name=Charlie","","Fri Oct 17 12:30:00 IST 2025","passed","Fri Oct 17 12:30:00 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testDeleteEmployeeParameterized"
"Verify that a employee details can be updated successfully.","16","testUpdateEmployee()","","Fri Oct 17 12:30:14 IST 2025","passed","Fri Oct 17 12:30:14 IST 2025","","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","testUpdateEmployee"
"","19","Should return created employee","","Fri Oct 17 12:29:47 IST 2025","passed","Fri Oct 17 12:29:47 IST 2025","","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","testCreateEmployee"
"","45","Should return all products","","Fri Oct 17 12:30:36 IST 2025","passed","Fri Oct 17 12:30:36 IST 2025","","com.demo.springboot_restassured_framework.Repository.ProductRepositoryTest","com.demo.springboot_restassured_framework.Repository.ProductRepositoryTest","testFindAll"
"","150","Should throw exception when deleting non-existing employee [Parameterized] [1] id=1111111","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testDeleteInvalidEmployeeParameterized"
"","534","Should delete the employee","","Fri Oct 17 12:29:46 IST 2025","passed","Fri Oct 17 12:29:46 IST 2025","","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","testDeleteEmployee"
"","10","Should update the created product","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.ProductServiceTest","com.demo.springboot_restassured_framework.service.ProductServiceTest","testUpdateProduct"
"","6","Should throw exception when update employee details with non-existing Id","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","testUpdateEmployee_NotFound"
"","131","Should return null for non-existing updated id","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.PetServiceTest","com.demo.springboot_restassured_framework.service.PetServiceTest","testUpdatePet_NotFound"
"","31","Should fetch employee by Id [Parameterized] [1] name=Alice","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testGetEmployeeByIdParameterized"
"","12","Should return empty when fetching non-existing employees by Id [Parameterized] [3] id=3333333","","Fri Oct 17 12:30:00 IST 2025","passed","Fri Oct 17 12:30:00 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testGetNonExistingEmployeeByIdParameterized"
"Verify that an employee deleted successfully.","61","testDeleteEmployee()","","Fri Oct 17 12:30:14 IST 2025","passed","Fri Oct 17 12:30:14 IST 2025","","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","testDeleteEmployee"
"","5","Should return all the employees","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","testGetAllEmployees"
"Verify try to Delete Invalid Employee.","29","testDeleteInvalidEmployee()","","Fri Oct 17 12:30:14 IST 2025","passed","Fri Oct 17 12:30:14 IST 2025","","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","testDeleteInvalidEmployee"
"","472","Should delete employee successfully","","Fri Oct 17 12:30:36 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","testDeleteEmployee"
"Verify that a new employee can be created successfully.","28","testCreateEmployee()","","Fri Oct 17 12:30:14 IST 2025","passed","Fri Oct 17 12:30:14 IST 2025","","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","testCreateEmployee"
"","14","Should save product and return it from DB","","Fri Oct 17 12:30:36 IST 2025","passed","Fri Oct 17 12:30:36 IST 2025","","com.demo.springboot_restassured_framework.Repository.ProductRepositoryTest","com.demo.springboot_restassured_framework.Repository.ProductRepositoryTest","testSaveProduct"
"","15","Should find by product price","","Fri Oct 17 12:30:36 IST 2025","passed","Fri Oct 17 12:30:36 IST 2025","","com.demo.springboot_restassured_framework.Repository.ProductRepositoryTest","com.demo.springboot_restassured_framework.Repository.ProductRepositoryTest","testFindByPrice"
"","168","testCreatePet()","","Fri Oct 17 12:30:30 IST 2025","passed","Fri Oct 17 12:30:30 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","testCreatePet"
"","24","Should return bad request on updating the employee","","Fri Oct 17 12:29:47 IST 2025","passed","Fri Oct 17 12:29:47 IST 2025","","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","testUpdateEmployee_NotFound"
"","657","testContainerStarts()","","Fri Oct 17 12:30:35 IST 2025","passed","Fri Oct 17 12:30:36 IST 2025","","com.demo.springboot_restassured_framework.integration.TestcontainersSmokeTest","com.demo.springboot_restassured_framework.integration.TestcontainersSmokeTest","testContainerStarts"
"","5","Should throw exception when employee by Id not found","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","testGetEmployeeById_NotFound"
"","179","Should create employees successfully [Parameterized] [1] name=Pravin, designation=SDET, salary=70000","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testCreateEmployeeParameterized"
"","16","Should return 404 when deleting non-existing employee","","Fri Oct 17 12:29:47 IST 2025","passed","Fri Oct 17 12:29:47 IST 2025","","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","testDeleteEmployee_NotFound"
"","164","testDeletePetById()","","Fri Oct 17 12:30:24 IST 2025","passed","Fri Oct 17 12:30:24 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","testDeletePetById"
"","13","Should find product by ID","","Fri Oct 17 12:30:36 IST 2025","passed","Fri Oct 17 12:30:36 IST 2025","","com.demo.springboot_restassured_framework.Repository.ProductRepositoryTest","com.demo.springboot_restassured_framework.Repository.ProductRepositoryTest","testFindById"
"","14","Should fetch employee by Id [Parameterized] [2] name=Bob","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:30:00 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testGetEmployeeByIdParameterized"
"","8","contextLoads()","","Fri Oct 17 12:30:38 IST 2025","passed","Fri Oct 17 12:30:38 IST 2025","","com.demo.springboot_restassured_framework.SpringbootRestassuredFrameworkApplicationTests","com.demo.springboot_restassured_framework.SpringbootRestassuredFrameworkApplicationTests","contextLoads"
"","133","Should create new Product","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.ProductServiceTest","com.demo.springboot_restassured_framework.service.ProductServiceTest","testCreateProduct"
"","4","Should return Product by Id","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.ProductServiceTest","com.demo.springboot_restassured_framework.service.ProductServiceTest","testGetProductById"
"","20","Should throw exception when deleting non-existing employee [Parameterized] [2] id=2222222","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testDeleteInvalidEmployeeParameterized"
"","12","Should fetch employee by name [Parameterized] [2] name=Bob","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testGetEmployeeByNameParameterized"
"","7","Should assign value through constructor","","Fri Oct 17 12:29:48 IST 2025","passed","Fri Oct 17 12:29:48 IST 2025","","com.demo.springboot_restassured_framework.Entity.PetEntityTest","com.demo.springboot_restassured_framework.Entity.PetEntityTest","testEntityConstructor"
"","15","Should update employee salary [Parameterized] [2] name=Bob, newSalary=90000","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testUpdateEmployeeParameterized"
"","14","Should return exception when employee id is not exist","","Fri Oct 17 12:29:47 IST 2025","passed","Fri Oct 17 12:29:47 IST 2025","","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","testGetEmployeeById_NotFound"
"","474","Should return 400 Bad Request when required fields are missing","","Fri Oct 17 12:29:46 IST 2025","passed","Fri Oct 17 12:29:47 IST 2025","","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","testCreateEmployee_BadRequest"
"Verify that get employee details by id successfully.","16","testGetEmployeeById()","","Fri Oct 17 12:30:14 IST 2025","passed","Fri Oct 17 12:30:14 IST 2025","","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","testGetEmployeeById"
"","27","Should update employee salary [Parameterized] [1] name=Alice, newSalary=100000","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testUpdateEmployeeParameterized"
"","5","Should create new Employee successfully","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","testCreateEmployee"
"","104","testDeletePetByIds()","","Fri Oct 17 12:30:24 IST 2025","passed","Fri Oct 17 12:30:24 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","testDeletePetByIds"
"","128","testGetPets()","","Fri Oct 17 12:30:30 IST 2025","passed","Fri Oct 17 12:30:30 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","testGetPets"
"Verify that get all employee details successfully.","52","testGetAllEmployees()","","Fri Oct 17 12:30:14 IST 2025","passed","Fri Oct 17 12:30:14 IST 2025","","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","testGetAllEmployees"
"","6","Should be saved successfully","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","testSaved"
"","154","testGetPetById()","","Fri Oct 17 12:30:30 IST 2025","passed","Fri Oct 17 12:30:30 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","testGetPetById"
"","37","Should delete employee by name [Parameterized] [2] name=Bob","","Fri Oct 17 12:30:00 IST 2025","passed","Fri Oct 17 12:30:00 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testDeleteEmployeeParameterized"
"","12","Should throw ConstraintViolationException for invalid names [Parameterized] [3] invalidName=","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testCreateEmployeeWithInvalidName"
"","4","Should update the Employee successfully","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","testUpdateEmployee"
"","20","Should throw exception when deleting non-existing employee [Parameterized] [3] id=3333333","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testDeleteInvalidEmployeeParameterized"
"","123","testDeleteNonExistingPet()","","Fri Oct 17 12:30:31 IST 2025","passed","Fri Oct 17 12:30:31 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","testDeleteNonExistingPet"
"","3","Should delete the Pet","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.PetServiceTest","com.demo.springboot_restassured_framework.service.PetServiceTest","testDeletePet"
"","18","Should update employee salary [Parameterized] [3] name=Charlie, newSalary=95000","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testUpdateEmployeeParameterized"
"","68","Should find by product name","","Fri Oct 17 12:30:36 IST 2025","passed","Fri Oct 17 12:30:36 IST 2025","","com.demo.springboot_restassured_framework.Repository.ProductRepositoryTest","com.demo.springboot_restassured_framework.Repository.ProductRepositoryTest","testFindByName"
"","152","testUpdatePetById()","","Fri Oct 17 12:30:30 IST 2025","passed","Fri Oct 17 12:30:30 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","testUpdatePetById"
"","11","Should throw exception when updating non-existing employee [Parameterized] [2] id=2222222, newSalary=20000","","Fri Oct 17 12:30:00 IST 2025","passed","Fri Oct 17 12:30:00 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testUpdateNonExistingEmployeeByIdParameterized"
"","12","Should throw ConstraintViolationException for invalid names [Parameterized] [2] invalidName= ","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testCreateEmployeeWithInvalidName"
"","3","Should delete product by Id","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.ProductServiceTest","com.demo.springboot_restassured_framework.service.ProductServiceTest","testDeleteProductById"
"","36","Should update the created employee","","Fri Oct 17 12:29:47 IST 2025","passed","Fri Oct 17 12:29:47 IST 2025","","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","testUpdateEmployee"
"","19","Should create employees successfully [Parameterized] [2] name=Raj, designation=Developer, salary=80000","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testCreateEmployeeParameterized"
"","4","Test Get All Products","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.ProductServiceTest","com.demo.springboot_restassured_framework.service.ProductServiceTest","testGetAllProducts"
"","17","Should fetch employee by name [Parameterized] [3] name=Charlie","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testGetEmployeeByNameParameterized"
"","301","Should set and get the Entity methods","","Fri Oct 17 12:29:48 IST 2025","passed","Fri Oct 17 12:29:48 IST 2025","","com.demo.springboot_restassured_framework.Entity.EmployeeEntityTest","com.demo.springboot_restassured_framework.Entity.EmployeeEntityTest","testEmployeeEntity"
"","70","Should delete all Pet","","Fri Oct 17 12:29:48 IST 2025","passed","Fri Oct 17 12:29:48 IST 2025","","com.demo.springboot_restassured_framework.controller.PetControllerTest","com.demo.springboot_restassured_framework.controller.PetControllerTest","testDeletePet"
"","31","Should throw ConstraintViolationException for invalid names [Parameterized] [1] invalidName=null","","Fri Oct 17 12:29:59 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testCreateEmployeeWithInvalidName"
"","648","Should fetch employee by name [Parameterized] [1] name=Alice","","Fri Oct 17 12:29:58 IST 2025","passed","Fri Oct 17 12:29:59 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testGetEmployeeByNameParameterized"
"","5","Should throw exception employee deleted successfully","","Fri Oct 17 12:30:37 IST 2025","passed","Fri Oct 17 12:30:37 IST 2025","","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","com.demo.springboot_restassured_framework.service.EmployeeServiceTest","testDeleteEmployee_NotFound"
"Verify that a GetNonExistingEmployeeById.","18","testGetNonExistingEmployeeById()","","Fri Oct 17 12:30:14 IST 2025","passed","Fri Oct 17 12:30:14 IST 2025","","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","com.demo.springboot_restassured_framework.integration.EmployeeApiIntegrationWithTransactionalTest","testGetNonExistingEmployeeById"
"","5142","testCreatePet()","","Fri Oct 17 12:30:18 IST 2025","passed","Fri Oct 17 12:30:23 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","testCreatePet"
"","22","Should fetch employee by Id [Parameterized] [3] name=Charlie","","Fri Oct 17 12:30:00 IST 2025","passed","Fri Oct 17 12:30:00 IST 2025","","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","com.demo.springboot_restassured_framework.integration.EmpApiIntegrationWithTransactionalNParameterizedTest","testGetEmployeeByIdParameterized"
"","224","testUpdatePetById()","","Fri Oct 17 12:30:23 IST 2025","passed","Fri Oct 17 12:30:24 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiIntegrationTest","testUpdatePetById"
"","213","Should return employee by Id","","Fri Oct 17 12:29:47 IST 2025","passed","Fri Oct 17 12:29:47 IST 2025","","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","testGetEmployeeById"
"","110","testGetNonExistingPet()","","Fri Oct 17 12:30:30 IST 2025","passed","Fri Oct 17 12:30:31 IST 2025","","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","com.demo.springboot_restassured_framework.integration.PetApiTestContainerIntegrationTest","testGetNonExistingPet"
"","37","Should return all employees","","Fri Oct 17 12:29:47 IST 2025","passed","Fri Oct 17 12:29:47 IST 2025","","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","com.demo.springboot_restassured_framework.controller.EmployeeControllerTest","testGetAllEmployees"
